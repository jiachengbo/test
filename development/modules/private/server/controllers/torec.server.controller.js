"use strict";function torecChanged(e){var r=require(path.resolve("./modules/global/server/sockets/server.server.socket"));r.emit(r.EVENTTYPE.TORECCHANGED,e)}var path=require("path"),_=require("lodash"),sequelize=require(path.resolve("./config/lib/sequelize")),constVALUES=require(path.resolve("./modules/global/server/config/const.server.config")),errorHandler=require(path.resolve("./modules/core/server/controllers/errors.server.controller")),torecAct=require(path.resolve("./modules/private/server/controllers/torec-act.server.controller")),logger=require(path.resolve("./config/lib/logger")).getLogger_FileNameBase(__filename);const RECSTATES=constVALUES.RECSTATES,RECACT=constVALUES.RECACT;var Torec=sequelize.model("Torec"),J_rec_act=sequelize.model("J_rec_act"),Tocallrecord=sequelize.model("Tocallrecord");exports.create=function(e,r){var t,o;return sequelize.transaction(function(n){var c={transaction:n};return torecAct.ctrlAct(e,r).then(function(e){if(t=e,o=Torec.build(t),t.crd)return Tocallrecord.create(t.crd,c)}).then(function(e){return e&&(o.callid=e.id,o.set("crd",e,{raw:!0})),o.save(c)}).then(function(){return o.createAct(t.act,c)})}).then(function(e){o.set("act",[e],{raw:!0}),r.json(o),torecChanged(o)}).catch(function(e){return logger.error("torec create error:",e),r.status(422).send({message:errorHandler.getErrorMessage(e)})})},exports.read=function(e,r){var t=e.model,o=e.query.f;if(o)switch(o){case"getCanActs":var n=torecAct.getStateCanActs(t.state_id,e.user);r.json({data:n});break;default:logger.error("read function "+o+"not defined error."),r.status(422).send({message:"read function "+o+"not defined error."})}else r.json(t)},exports.update=function(e,r){var t,o=e.model,n=o.get("act");return sequelize.transaction(function(n){var c={transaction:n};return torecAct.ctrlAct(e,r,o).then(function(e){return console.log("ctrlact ret:",e),t=e,o.update(t,c)}).then(function(){return o.createAct(t.act,c)})}).then(function(e){n&&Array.isArray(n)?n.push(e):n=[e],o.set("act",n,{raw:!0}),r&&r.json(o),torecChanged(o)}).catch(function(e){return logger.error("torec update error:",e),r&&r.status(422).send({message:errorHandler.getErrorMessage(e)}),e})},exports.delete=function(e,r){var t=e.model;return sequelize.transaction(function(e){var r={transaction:e};return t.destroy(r).then(function(){})}).then(function(){r.json(t)}).catch(function(e){return logger.error("torec delete error:",e),r.status(422).send({message:errorHandler.getErrorMessage(e)})})},exports.list=function(e,r){var t={};e.query.q&&(t=JSON.parse(e.query.q)),logger.debug("torec list jsonQuery:",t);var o=e.query.f;if(!o)return Torec.findAll(Object.assign({include:[{model:Tocallrecord,as:"crd"}],order:"Torec.create_time DESC"},t)).then(function(e){var t=[];return e.forEach(function(e){t.push(e.getAct({order:"act_time ASC"}))}),Promise.all(t).then(function(t){for(var o=0;o<e.length;o++)e[o].set("act",t[o],{raw:!0});r.json(e)})}).catch(function(e){return logger.error("torec list error:",e),r.status(422).send({message:errorHandler.getErrorMessage(e)})});switch(o){case"getCount":Torec.count(t).then(function(e){r.json({count:e})}).catch(function(e){r.status(422).send({message:"list function getCount error"})});break;default:logger.error("list function "+o+"not defined error."),r.status(422).send({message:"list function "+o+"not defined error."})}},exports.torecByID=function(e,r,t,o){Torec.findById(o,{include:[{model:Tocallrecord,as:"crd"}]}).then(function(r){if(r)return r.getAct({order:"act_time ASC"}).then(function(o){r.set("act",o,{raw:!0}),e.model=r,t()});logger.error("torec findbyid find null error id=",o),t(new Error("Failed to load torec id "+o))}).catch(function(e){return logger.error("torec findbyid error:",e),t(e)})};